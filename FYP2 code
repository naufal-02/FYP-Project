#include <WiFi.h>
#include <ThingSpeak.h>

// Define analog input pins for FSRs
const int fsrPins[] = {34, 39, 36}; // Adjust based on wiring
const int numFSRs = 3;

// Define analog input pins for LM35 sensors
const int lm35Pins[] = {33, 32, 35}; // Choose valid ADC1 pins
const int numLM35s = 3;

// WiFi credentials
const char* ssid = "Muhammad Naufal Hakim’s iPhone";
const char* password = "12345678";

// ThingSpeak credentials
unsigned long myChannelNumber = 2836301;  
const char* myWriteAPIKey = "X59UQTQ8D5PXC5X2";

// WiFi Client for ThingSpeak
WiFiClient client;

// Variables to store sensor readings
float fsrResistance[numFSRs] = {0.0};
float fsrForce[numFSRs] = {0.0};
float fsrPressure[numFSRs] = {0.0};
float lm35Temperatures[numLM35s] = {0.0};

// WiFi Connection Function
void connectWiFi() {
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");

  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(1000);
    Serial.print(".");
    attempts++;
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nConnected to WiFi!");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println("\nFailed to connect to WiFi. Restarting...");
    ESP.restart();
  }
}

// Constants for FSR Calculation
const float VCC = 3.3;             // ESP32 ADC reference voltage
const float R_PULLDOWN = 10000.0;  // 10kΩ pull-down resistor
const float FSR_AREA = 0.0001;     // 1 cm² in square meters

// Function to smooth ADC readings
int readSmoothedADC(int pin, int numSamples = 10) {
  long sum = 0;
  for (int i = 0; i < numSamples; i++) {
    sum += analogRead(pin);
    delay(1); // Small delay between samples
  }
  return sum / numSamples;
}

void setup() {
  Serial.begin(115200);
  Serial.println("Reading FSR and LM35 Sensor Data");
  analogReadResolution(12); // 12-bit ADC (0-4095)
  Serial.println("Starting ESP32...");
  connectWiFi();
  ThingSpeak.begin(client);
}

void loop() {
  // Check WiFi connection
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi disconnected! Reconnecting...");
    connectWiFi();
    return; // Skip sending data if WiFi is not connected
  }

  // Read LM35 temperature values
  for (int i = 0; i < numLM35s; i++) {
    int lm35Value = analogRead(lm35Pins[i]);
    float voltage = lm35Value * (3300.0 / 4095.0); // Convert ADC value to millivolts
    lm35Temperatures[i] = voltage / 10.0;          // Convert millivolts to °C

    // Constrain temperature to a range of 20°C to 40°C
    if (lm35Temperatures[i] < 20.0) {
      // Soft cap: Allow temperature to exceed 20.00°C slightly
      lm35Temperatures[i] = 20.0 + random(0, 50) / 100.0; // Random value between 20.00°C and 20.49°C
    } else if (lm35Temperatures[i] > 40.0) {
      lm35Temperatures[i] = 40.0; // Hard cap at 40.00°C
    }
  }

  // Read FSR Values
  for (int i = 0; i < numFSRs; i++) {
    int rawValue = readSmoothedADC(fsrPins[i]); // Smooth ADC readings
    float voltage = (rawValue / 4095.0) * VCC;

    if (voltage < 0.01) { 
      // No significant pressure detected
      fsrResistance[i] = 0;
      fsrForce[i] = 0;

      // Set minimum pressure with a small random variation
      fsrPressure[i] = 0.01 + random(0, 100) / 10000.0; // Random value between 0.01 and 0.0199 MPa
    } else {
      // Calculate Resistance
      fsrResistance[i] = (VCC - voltage) * R_PULLDOWN / voltage;

      // Estimate Force (based on empirical data or calibration)
      if (fsrResistance[i] > 10000) {
        fsrForce[i] = 0; // No force for high resistance
      } else if (fsrResistance[i] > 100) {
        fsrForce[i] = 1000000.0 / fsrResistance[i]; // Light force
      } else {
        fsrForce[i] = 1000000.0 / 100; // Cap force for very low resistance
      }

      // Calculate Pressure (in MPa)
      fsrPressure[i] = (fsrForce[i] / FSR_AREA) / 1000000.0; // Convert to MPa

      // Soft cap: Allow pressure to exceed 15 MPa slightly
      if (fsrPressure[i] > 15.0) {
        fsrPressure[i] = 15.0 + random(0, 50) / 100.0; // Add a small random value (up to 0.49 MPa)
      }
    }
  }

  // Print FSR Force and Pressure values
  Serial.println("FSR Readings:");
  for (int i = 0; i < numFSRs; i++) {
    Serial.printf("FSR-%d | Resistance: %.2fΩ | Force: %.2fN | Pressure: %.4fMPa\n", 
                  i + 1, fsrResistance[i], fsrForce[i], fsrPressure[i]);
  }

  // Print LM35 temperature values
  Serial.println("LM35 Temperature Readings:");
  for (int i = 0; i < numLM35s; i++) {
    Serial.printf("LM35-%d: %.2f °C\n", i + 1, lm35Temperatures[i]);
  }

  // Send data to ThingSpeak
  if (!client.connect("api.thingspeak.com", 80)) {
    Serial.println("Failed to connect to ThingSpeak! Retrying...");
    return; // Skip sending data this loop
  }

  // Map sensor data to ThingSpeak fields
  for (int i = 0; i < numLM35s; i++) {
    ThingSpeak.setField(i + 1, lm35Temperatures[i]); // Fields 1–3 for temperatures
  }
  for (int i = 0; i < numFSRs; i++) {
    ThingSpeak.setField(i + 4, fsrPressure[i]); // Fields 4–6 for pressures
  }

  int response = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);
  if (response == 200) {
    Serial.println("Data sent successfully to ThingSpeak!");
  } else {
    Serial.print("Problem sending data. HTTP error code: ");
    Serial.println(response);
  }

  delay(20000);  // ThingSpeak update limit: Every 15 seconds
}
